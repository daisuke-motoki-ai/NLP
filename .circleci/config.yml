version: 2 # CircleCI のバージョン 2.0 を使用していることを示します
jobs: # 1回の実行の基本作業単位
  build: # `Workflows` を使用しない実行では、エントリポイントとして `build` ジョブが必要です
    working_directory: ./middleware
    macos:  # macOS Executor を使用していることを示します
      xcode: "10.0.0" # 選択された Xcode のバージョン
    steps: # 実行する一連のコマンド
      - checkout  # ユーザーのバージョン管理システムからコードをプルダウンします
      - run:
          # Xcode の CLI ツール `xcodebuild` を使用してテストを実行します
          name: 単体テストを実行
          command: docker-compose -f docker-compose.yml up -d --build
        #      - run:
        #          # アプリケーションをビルドします
        #          name: アプリケーションをビルド
        #          command: xcodebuild
        #      - run:
        #          # Xcode のビルド出力を圧縮して、アーティファクトとして格納できるようにします
        #          name: 保存のためにアプリを圧縮
        #          command: zip -r app.zip build/Release/circleci-demo-macos.app
        #      - store_artifacts: # このビルド出力を保存します  (詳細については https://circleci.com/docs/ja/2.0/artifacts/ を参照)
        #          path: app.zip
        #          destination: app
#
#
#
# version: 2
# jobs:
#   build:
#     docker:
#       - image: debian:stretch
# 
#     steps:
#       - checkout
# 
#       - run:
#           name: Greeting
#           command: echo Hello, world.
# 
#       - run:
#           name: Print the Current Time
#           command: date
# 
#       - run:
#           name: Activate and check the container
#           command: l
#             docker-compose -f docker-compose.yml down && \
#             docker-compose -f docker-compose.yml up -d --build && \
#             docker-compose exec science bash

# version: 2
# jobs:
#   build:
#     docker:
#       # using custom image, see .circleci/images/primary/Dockerfile
#       - image: circleci/cci-demo-docker-primary:0.0.2
#       - image: postgres:9.4.1
#         environment:
#           POSTGRES_USER: ubuntu
#           POSTGRES_DB: contacts
#     working_directory: /go/src/github.com/circleci/cci-demo-docker
# 
#     environment:
#       TEST_RESULTS: /tmp/test-results
# 
#     steps:
#       - checkout
# 
#       - run:
#           name: Waiting for Postgres to be ready
#           command: |
#             for i in `seq 1 10`;
#             do
#               nc -z localhost 5432 && echo Success && exit 0
#               echo -n .
#               sleep 1
#             done
#             echo Failed waiting for Postgress && exit 1
#       - run: mkdir -p $TEST_RESULTS
# 
#     #       - run:
#     #           name: Run unit tests
#     #           environment:
#     #             DATABASE_URL: "postgres://ubuntu@localhost:5432/contacts?sslmode=disable"
#     #             DB_MIGRATIONS: /go/src/github.com/circleci/cci-demo-docker/db/migrations
#     #           command: |
#     #             set -ou pipefail
#     #             trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
#     #             # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails
#     #             # without this option script will return success regardless of testing result due to pipe after test command
#     #             make test | tee ${TEST_RESULTS}/go-test.out
#     #       - setup_remote_docker
# 
#       # This should go into custom primary image, here's only for the sake of explanation
#       - run:
#           name: Install Docker client
#           command: |
#             set -x
#             VER="17.03.0-ce"
#             curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
#             tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#             mv /tmp/docker/* /usr/bin
#       # This should go into custom primary image, here's only for the sake of explanation
#       - run:
#           name: Install Docker Compose
#           command: |
#             set -x
#             curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
#             chmod +x /usr/local/bin/docker-compose
#     #       - run:
#     #           name: Build service
#     #           command: make
#       - run:
#           name: Activate and check the container
#           command: |
#             docker-compose -f docker-compose.yml up -d --build && \
#             docker-compose exec science bash
# 
# 
#         # - run:
#         # -   name: Start container and verify it's working
#         # -   command: |
#         # -     set -x
#         # -     docker-compose up -d
#             # docker-compose will start 2 containers, the one with service will be named `contacts`
#             # we start another container with curl in the same network as `contacts`, this way we have
#             # all exposed ports from `contacts` available on `localhost` in this new container
#             docker run --network container:contacts \
#               appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
#       - deploy:
#           name: Build and push Docker image
#           command: |
#             TAG="0.1.${CIRCLE_BUILD_NUM}"
#             docker build -t circleci/cci-demo-docker:$TAG .
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker push circleci/cci-demo-docker:$TAG
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: raw-test-output
# 
#       - store_test_results:
#           path: /tmp/test-results
